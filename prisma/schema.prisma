generator client {
  provider = "prisma-client-js"
  output = "../node_modules/@prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Voting {
  id         Int         @id @default(autoincrement())
  name       String
  startTime  DateTime
  endTime    DateTime
  candidates Candidate[]
  onlyOne    Boolean
  archive    Boolean     @default(false)

  groupId Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  votingFromGroup VotingFromGroup[]

  @@unique([groupId, name])
}

model Candidate {
  name    String
  ballots Ballot[]

  groupId  Int
  votingId Int
  voting   Voting @relation(fields: [votingId], references: [id], onDelete: Cascade)

  @@id([votingId, name])
}

model Ballot {
  token String   @id
  time  DateTime @default(now())

  votingId      Int
  candidateName String
  candidate     Candidate @relation(fields: [votingId, candidateName], references: [votingId, name], onDelete: Cascade)
}

model Voter {
  id    Int         @id
  login VoterLogin?

  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model VoterLogin {
  id   Int      @id
  time DateTime @default(now())

  voterId Int   @unique
  voter   Voter @relation(fields: [voterId], references: [id], onDelete: Cascade)
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @unique

  voters Voter[]
  departmentInGroup DepartmentInGroup[]
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  votings           Voting[]
  departmentInGroup DepartmentInGroup[]
  votingFromGroup   VotingFromGroup[]
}

model DepartmentInGroup {
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  groupId Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([groupId, departmentId])
}

model VotingFromGroup {
  cnt Int @default(0)

  votingId Int
  voting   Voting @relation(fields: [votingId], references: [id], onDelete: Cascade)

  groupId Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([votingId, groupId])
}

model Admin {
  id Int @id
}

model VotingTimeline {
  id Int @id @default(autoincrement())
  content String
  start DateTime
  end DateTime
  showEnd Boolean
  showTime Boolean
}

